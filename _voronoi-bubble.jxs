<jittershader name="voronoi">
	<description>
	Voronoi
	</description>
	<param name="tex0" type="int" default="0" />	
	<param name="time" type="float" default="0.0" />
	<param name="scale" type="float" default="2." />
	<param name="speed" type="float" default="1000" />
	<param name="rand_seed" type="float" default="1." />
	<param name="dim" type="vec2" default="500. 500." />
	<param name="strength" type="float" default="1.5" />
	<language name="glsl" version="2.1">
		<bind param="tex0" program="fp" />
		<bind param="time" program="fp" />
		<bind param="scale" program="fp" />
		<bind param="speed" program="fp" />
		<bind param="dim" program="fp" />
		<bind param="strength" program="fp" />		
		<bind param="rand_seed" program="fp" />
		<program name="vp" type="vertex" source="sh.passthru.xform.vp.glsl" />
		<program name="fp" type="fragment">
<![CDATA[

uniform sampler2DRect tex0;

varying vec2 texcoord0;

uniform float strength;

uniform float time;
uniform float scale;
uniform float speed;
uniform vec2 dim;

uniform float rand_seed;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main()
{
	vec2 st = vec2(gl_FragCoord.xy/dim.xy);
	st.x *= dim.x/dim.y;
	vec2 displacement = vec2(1.);

	st *= scale;

	vec2 i_st = floor(st);
	vec2 f_st = fract(st);

	float m_dist = 1.;
	vec2 m_point;

	for(int y = -1; y <= 1; y++){
		for(int x = -1; x <= 1; x++){
			vec2 neighbor = vec2(float(x),float(y));
			vec2 point = vec2(rand((i_st + neighbor)*rand_seed));

			point = 0.5 + 0.5*sin((time/speed) + 6.2831*point);

			vec2 diff = neighbor + point - f_st;

			float dist = length(diff);

			if(dist < m_dist){
				m_dist = dist;
				m_point = point;
			}
		}
	}

	//displacement vector
	//TODO: How can I conform this to the voronoi shape? 
	//displacement = vec2(m_dist - m_point) - m_dist; //this is great, and a possible alt to the working voronoi
	//displacement = normalize(vec2(gl_FragCoord.xy/dim.xy) - m_dist); 
	displacement = normalize(vec2(texcoord0 - m_point) * m_dist)+0.5; 
	
	//once I can conform this shape properly... like in the iq example...
	//displacement = m_dist * (0.5 + 0.5*sin(64.0*m_dist))*vec2(1.0);
	//isolines
	//color -= step(.7,abs(sin(100.0*m_dist)))*.3;

	//point dot
	//displacement -= 1.-step(.05, m_dist);
	
	
	vec2 uv0 = texcoord0 / dim;
	
//	uv0 += m_dist * sin(vec2(texcoord0 - m_point))/strength; //shred glitch
//	uv0 += m_dist * (normalize(vec2(m_point - texcoord0))/strength); //to the left	

// get length between points
	vec2 vectDistance =	vec2(m_point - texcoord0);
	vec2 vectDirection = vectDistance / length(vectDistance);
	
	uv0 += m_dist * (vectDistance/strength);
	
	vec3 color = texture2DRect(tex0, uv0*dim).xyz;
//	gl_FragColor = vec4(vec3(1.-m_dist),1.0);
//	gl_FragColor = vec4(vec3(displacement.x),1.0);
	gl_FragColor = vec4(color,1.0);
}

]]>
		</program>
	</language>
</jittershader>
